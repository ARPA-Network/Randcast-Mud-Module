// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import {SchemaType} from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import {IStore} from "@latticexyz/store/src/IStore.sol";
import {StoreSwitch} from "@latticexyz/store/src/StoreSwitch.sol";
import {StoreCore} from "@latticexyz/store/src/StoreCore.sol";
import {Bytes} from "@latticexyz/store/src/Bytes.sol";
import {Memory} from "@latticexyz/store/src/Memory.sol";
import {SliceLib} from "@latticexyz/store/src/Slice.sol";
import {EncodeArray} from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import {FieldLayout, FieldLayoutLib} from "@latticexyz/store/src/FieldLayout.sol";
import {Schema, SchemaLib} from "@latticexyz/store/src/Schema.sol";
import {PackedCounter, PackedCounterLib} from "@latticexyz/store/src/PackedCounter.sol";
import {ResourceId} from "@latticexyz/store/src/ResourceId.sol";
import {RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE} from "@latticexyz/store/src/storeResourceTypes.sol";

FieldLayout constant _fieldLayout = FieldLayout.wrap(0x0044030020200400000000000000000000000000000000000000000000000000);

struct RandcastData {
    bytes32 requestId;
    uint256 randomness;
    bytes4 callbackFunctionSelector;
}

library Randcast {
    /**
     * @notice Get the table values' field layout.
     * @return _fieldLayout The field layout for the table.
     */
    function getFieldLayout() internal pure returns (FieldLayout) {
        return _fieldLayout;
    }

    /**
     * @notice Get the table's key schema.
     * @return _keySchema The key schema for the table.
     */
    function getKeySchema() internal pure returns (Schema) {
        SchemaType[] memory _keySchema = new SchemaType[](1);
        _keySchema[0] = SchemaType.BYTES32;

        return SchemaLib.encode(_keySchema);
    }

    /**
     * @notice Get the table's value schema.
     * @return _valueSchema The value schema for the table.
     */
    function getValueSchema() internal pure returns (Schema) {
        SchemaType[] memory _valueSchema = new SchemaType[](3);
        _valueSchema[0] = SchemaType.BYTES32;
        _valueSchema[1] = SchemaType.UINT256;
        _valueSchema[2] = SchemaType.BYTES4;

        return SchemaLib.encode(_valueSchema);
    }

    /**
     * @notice Get the table's key field names.
     * @return keyNames An array of strings with the names of key fields.
     */
    function getKeyNames() internal pure returns (string[] memory keyNames) {
        keyNames = new string[](1);
        keyNames[0] = "key";
    }

    /**
     * @notice Get the table's value field names.
     * @return fieldNames An array of strings with the names of value fields.
     */
    function getFieldNames() internal pure returns (string[] memory fieldNames) {
        fieldNames = new string[](3);
        fieldNames[0] = "requestId";
        fieldNames[1] = "randomness";
        fieldNames[2] = "callbackFunctionSelector";
    }

    /**
     * @notice Register the table with its config.
     */
    function register(ResourceId _tableId) internal {
        StoreSwitch.registerTable(
            _tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames()
        );
    }

    /**
     * @notice Register the table with its config.
     */
    function _register(ResourceId _tableId) internal {
        StoreCore.registerTable(
            _tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames()
        );
    }

    /**
     * @notice Get requestId.
     */
    function getRequestId(ResourceId _tableId, bytes32 key) internal view returns (bytes32 requestId) {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
        return (bytes32(_blob));
    }

    /**
     * @notice Get requestId.
     */
    function _getRequestId(ResourceId _tableId, bytes32 key) internal view returns (bytes32 requestId) {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
        return (bytes32(_blob));
    }

    /**
     * @notice Set requestId.
     */
    function setRequestId(ResourceId _tableId, bytes32 key, bytes32 requestId) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestId)), _fieldLayout);
    }

    /**
     * @notice Set requestId.
     */
    function _setRequestId(ResourceId _tableId, bytes32 key, bytes32 requestId) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestId)), _fieldLayout);
    }

    /**
     * @notice Get randomness.
     */
    function getRandomness(ResourceId _tableId, bytes32 key) internal view returns (uint256 randomness) {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
        return (uint256(bytes32(_blob)));
    }

    /**
     * @notice Get randomness.
     */
    function _getRandomness(ResourceId _tableId, bytes32 key) internal view returns (uint256 randomness) {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
        return (uint256(bytes32(_blob)));
    }

    /**
     * @notice Set randomness.
     */
    function setRandomness(ResourceId _tableId, bytes32 key, uint256 randomness) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((randomness)), _fieldLayout);
    }

    /**
     * @notice Set randomness.
     */
    function _setRandomness(ResourceId _tableId, bytes32 key, uint256 randomness) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((randomness)), _fieldLayout);
    }

    /**
     * @notice Get callbackFunctionSelector.
     */
    function getCallbackFunctionSelector(ResourceId _tableId, bytes32 key)
        internal
        view
        returns (bytes4 callbackFunctionSelector)
    {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
        return (bytes4(_blob));
    }

    /**
     * @notice Get callbackFunctionSelector.
     */
    function _getCallbackFunctionSelector(ResourceId _tableId, bytes32 key)
        internal
        view
        returns (bytes4 callbackFunctionSelector)
    {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
        return (bytes4(_blob));
    }

    /**
     * @notice Set callbackFunctionSelector.
     */
    function setCallbackFunctionSelector(ResourceId _tableId, bytes32 key, bytes4 callbackFunctionSelector) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((callbackFunctionSelector)), _fieldLayout);
    }

    /**
     * @notice Set callbackFunctionSelector.
     */
    function _setCallbackFunctionSelector(ResourceId _tableId, bytes32 key, bytes4 callbackFunctionSelector) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((callbackFunctionSelector)), _fieldLayout);
    }

    /**
     * @notice Get the full data.
     */
    function get(ResourceId _tableId, bytes32 key) internal view returns (RandcastData memory _table) {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) =
            StoreSwitch.getRecord(_tableId, _keyTuple, _fieldLayout);
        return decode(_staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Get the full data.
     */
    function _get(ResourceId _tableId, bytes32 key) internal view returns (RandcastData memory _table) {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) =
            StoreCore.getRecord(_tableId, _keyTuple, _fieldLayout);
        return decode(_staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Set the full data using individual values.
     */
    function set(
        ResourceId _tableId,
        bytes32 key,
        bytes32 requestId,
        uint256 randomness,
        bytes4 callbackFunctionSelector
    ) internal {
        bytes memory _staticData = encodeStatic(requestId, randomness, callbackFunctionSelector);

        PackedCounter _encodedLengths;
        bytes memory _dynamicData;

        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Set the full data using individual values.
     */
    function _set(
        ResourceId _tableId,
        bytes32 key,
        bytes32 requestId,
        uint256 randomness,
        bytes4 callbackFunctionSelector
    ) internal {
        bytes memory _staticData = encodeStatic(requestId, randomness, callbackFunctionSelector);

        PackedCounter _encodedLengths;
        bytes memory _dynamicData;

        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
    }

    /**
     * @notice Set the full data using the data struct.
     */
    function set(ResourceId _tableId, bytes32 key, RandcastData memory _table) internal {
        bytes memory _staticData = encodeStatic(_table.requestId, _table.randomness, _table.callbackFunctionSelector);

        PackedCounter _encodedLengths;
        bytes memory _dynamicData;

        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Set the full data using the data struct.
     */
    function _set(ResourceId _tableId, bytes32 key, RandcastData memory _table) internal {
        bytes memory _staticData = encodeStatic(_table.requestId, _table.randomness, _table.callbackFunctionSelector);

        PackedCounter _encodedLengths;
        bytes memory _dynamicData;

        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
    }

    /**
     * @notice Decode the tightly packed blob of static data using this table's field layout.
     */
    function decodeStatic(bytes memory _blob)
        internal
        pure
        returns (bytes32 requestId, uint256 randomness, bytes4 callbackFunctionSelector)
    {
        requestId = (Bytes.slice32(_blob, 0));

        randomness = (uint256(Bytes.slice32(_blob, 32)));

        callbackFunctionSelector = (Bytes.slice4(_blob, 64));
    }

    /**
     * @notice Decode the tightly packed blobs using this table's field layout.
     * @param _staticData Tightly packed static fields.
     *
     *
     */
    function decode(bytes memory _staticData, PackedCounter, bytes memory)
        internal
        pure
        returns (RandcastData memory _table)
    {
        (_table.requestId, _table.randomness, _table.callbackFunctionSelector) = decodeStatic(_staticData);
    }

    /**
     * @notice Delete all data for given keys.
     */
    function deleteRecord(ResourceId _tableId, bytes32 key) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreSwitch.deleteRecord(_tableId, _keyTuple);
    }

    /**
     * @notice Delete all data for given keys.
     */
    function _deleteRecord(ResourceId _tableId, bytes32 key) internal {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
    }

    /**
     * @notice Tightly pack static (fixed length) data using this table's schema.
     * @return The static data, encoded into a sequence of bytes.
     */
    function encodeStatic(bytes32 requestId, uint256 randomness, bytes4 callbackFunctionSelector)
        internal
        pure
        returns (bytes memory)
    {
        return abi.encodePacked(requestId, randomness, callbackFunctionSelector);
    }

    /**
     * @notice Encode all of a record's fields.
     * @return The static (fixed length) data, encoded into a sequence of bytes.
     * @return The lengths of the dynamic fields (packed into a single bytes32 value).
     * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
     */
    function encode(bytes32 requestId, uint256 randomness, bytes4 callbackFunctionSelector)
        internal
        pure
        returns (bytes memory, PackedCounter, bytes memory)
    {
        bytes memory _staticData = encodeStatic(requestId, randomness, callbackFunctionSelector);

        PackedCounter _encodedLengths;
        bytes memory _dynamicData;

        return (_staticData, _encodedLengths, _dynamicData);
    }

    /**
     * @notice Encode keys as a bytes32 array using this table's field layout.
     */
    function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
        bytes32[] memory _keyTuple = new bytes32[](1);
        _keyTuple[0] = key;

        return _keyTuple;
    }
}
